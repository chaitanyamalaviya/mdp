package mdp.algorithm.explore.P;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Stack;

import javax.swing.JLabel;
import javax.swing.Timer;

import mdp.algorithm.fastestPath.PathSolver;
import mdp.algorithm.simulator.Maze;
import mdp.algorithm.simulator.Stopwatch;
import mdp.algorithm.simulator.TimerQueue;

public class Exploration implements Runnable{
	
	private Stopwatch s;
	private int robotOrientation;
	private int robotMidPointRow;
	private int robotMidPointCol;
	private Maze maze;
	private Stack<Position> stack;
	private Position temp;
	private JLabel exploreTimeValue;
	private int timeLimit;
	private Timer timer;
	private static int ACTIONTIMER = 10;
	private int i = 0;
	private boolean status = false;
	private boolean backtrack = false;
	int[][] visited = new int[22][17]; //0 mean not visted, 1 means visted
	private boolean end = false;
	
	public Exploration(Maze mazeMap, JLabel exploreTimeValue, int timeLimit){
		s = new Stopwatch();
		maze = mazeMap;
		stack = new Stack<Position>();
		robotOrientation = maze.getRobotOrientation();
		robotMidPointRow = maze.getRobotMidPointRow();
		robotMidPointCol = maze.getRobotMidPointCol();
		temp = new Position(robotMidPointRow, robotMidPointCol, robotOrientation);
		stack.push(temp);
		
		for(int i=0; i<21; i++){
			for(int j=0; j<16; j++){
				visited[i][j] = 0; 
			}
		}
		exploreTimeValue = exploreTimeValue;
		timeLimit = timeLimit;
	}
	
	public void explorePath(){
		s.startStopwatchTimer(exploreTimeValue, timeLimit);
		startTimer();
	}

	private void startTimer(){
		timer = new Timer(ACTIONTIMER, new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				if(stack.isEmpty() || maze.countExplored() == 100){
					stopExplore();
		  			System.out.print("end1");
		  		}
				else{
					if(status){
						explorePathAction();
						status = false;
					}
					else{
						setExploreAction();
						status = true;
					}
		    	}
			}
		});
		timer.start();
	}
	
	public void setExploreAction(){
		maze.setExplorationPathAction();
	}
	
	public void explorePathAction(){
		//North
		robotMidPointRow = maze.getRobotMidPointRow();
		robotMidPointCol = maze.getRobotMidPointCol();
		visited[robotMidPointRow-1][robotMidPointCol-1] = 1;
		visited[robotMidPointRow-1][robotMidPointCol] = 1;
		visited[robotMidPointRow-1][robotMidPointCol+1] = 1;
		visited[robotMidPointRow][robotMidPointCol-1] = 1;
		visited[robotMidPointRow][robotMidPointCol] = 1;
		visited[robotMidPointRow][robotMidPointCol+1] = 1;
		visited[robotMidPointRow+1][robotMidPointCol-1] = 1;
		visited[robotMidPointRow+1][robotMidPointCol] = 1;
		visited[robotMidPointRow+1][robotMidPointCol+1] = 1;
		
		if(maze.checkFrontClear(visited)){
			backtrack = false;
			maze.moveForwardAction();
			robotMidPointRow = maze.getRobotMidPointRow();
			robotMidPointCol = maze.getRobotMidPointCol();
			robotOrientation = maze.getRobotOrientation();
			stack.push(new Position(robotMidPointRow, robotMidPointCol, robotOrientation));
		}
		else if(maze.checkLeftClear(visited)){
			backtrack = false;
			maze.spinLeftAction();
		}
		else if(maze.checkRightClear(visited)){
			backtrack = false;
			maze.spinRightAction();
		}
		else{
			backtrack = true;
			Position last = stack.pop();
			
			switch (last.getOri()) {
			case 0:
				switch (maze.getRobotOrientation()) {
				case 0:
                	maze.spinLeftAction();
                	maze.spinLeftAction();
                	break;
                case 1:
                	maze.spinRightAction();
                	break;
                case 2:
                	break;
                case 3:
                	maze.spinLeftAction();
                	break;
				}
				break;
			case 1:
				switch (maze.getRobotOrientation()) {
				case 0:
                	maze.spinLeftAction();
                	break;
                case 1:
                	maze.spinRightAction();
                	maze.spinRightAction();
                	break;
                case 2:
                	maze.spinRightAction();
                	break;
                case 3:
                	break;
				}
				break;
			case 2:
				switch (maze.getRobotOrientation()) {
				case 0:
                	break;
                case 1:
                	maze.spinLeftAction();
                	break;
                case 2:
                	maze.spinRightAction();
                	maze.spinRightAction();
                	break;
                case 3:
                	maze.spinRightAction();
                	break;
				}
				break;
			case 3:
				switch (maze.getRobotOrientation()) {
				case 0:
					maze.spinRightAction();
                	break;
                case 1:
                	break;
                case 2:
                	maze.spinLeftAction();
                	break;
                case 3:
                	maze.spinRightAction();
                	maze.spinRightAction();
                	break;
				}
				break;
			}
			
			if (!stack.isEmpty()) {
				System.out.print("here");
				maze.checkFrontObstaclesClear();
                maze.moveForwardAction();
            }
            else
            {
            	end=true;
            	System.out.print("done");
            }
			
		}
	}
	
	private void stopExplore(){
		Point start = new Point(maze.getRobotMidPointRow(), maze.getRobotMidPointCol());
		if(!checkGoalVisited()){
	        Point goal = new Point(2, 14);
	        PathSolver ps = new PathSolver();
	        maze.startTimer();
			ps.moveRobot(ps.solvePath(start,goal,maze,maze.getRobotOrientation()),start,goal,maze,maze.getRobotOrientation());
		}
		start = new Point(maze.getRobotMidPointRow(), maze.getRobotMidPointCol());
		Point goal = new Point(19,2);
        PathSolver ps = new PathSolver();
        maze.startTimer();
		ps.moveRobot(ps.solvePath(start,goal,maze,maze.getRobotOrientation()),start,goal,maze,maze.getRobotOrientation());
		timer.stop();
	}
	public void stopExploreStopwatchTimer(){
		s.stopStopwatchTimer();
	}
	
	public void stopTimer(){
		timer.stop();
	}
	
	public void clearStack(){
        stack.clear();
    }
	
	private boolean checkGoalVisited(){
		if(visited[2][13] ==1 || visited[3][13]==1 || visited[2][14]==1 || visited[3][14]==1)
			return true;
		return false;
	}
	
	@Override
    public void run() {
        // TODO Auto-generated method stub
		explorePath();
    }
}
