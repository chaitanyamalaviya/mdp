package mdp.algorithm.simulator;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.Timer;

import mdp.algorithm.explore.*;
import mdp.algorithm.fastestPath.PathSolver;

public class Simulator {
	private static final Maze mazeMap = new Maze();
	
	private static final Color DEFAULT = new Color(198,217,241);
	private static final Color OBSTACLES = new Color(64,64,64);
	private static final Color GOALSTART = Color.WHITE;
	
	private static final Color RIGHTBACKGROUND = Color.WHITE;
	
	private static final Color EXPLORED = new Color(255,255,102);
	private static final Color ROBOT = new Color(146,208,80);
	
	private static Stopwatch stopwatch = new Stopwatch();
	private static JLabel exploreTimeValue = new JLabel();
	private static JLabel fpTimeValue = new JLabel();
	
	private static JLabel explorePercentExploredValue = new JLabel();
	private static JLabel explorePercentObstaclesValue = new JLabel();
	
	private static final int GOALROW = 2;
	private static final int GOALCOL = 14;
	private static final int STARTROW = 19;
	private static final int STARTCOL = 2;

	private static boolean fastestPathStatus = false; 
	private static boolean explorationStatus = false; 
	
	private static boolean md1 = false;
	private static boolean md2 = false;
	
	private static Timer dataTimer;
	
	public static void main(String[] args) {
		JFrame frame = new JFrame();
		frame.setTitle("Maze Simulator");
		frame.setSize(660, 660);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
		
		Container contentPane = frame.getContentPane();
		contentPane.add(mazeMap, BorderLayout.CENTER);
		
		//Start of bottom buttons
		JPanel buttonPanel = new JPanel();
		//buttonPanel.setLayout(new GridLayout(1, 4, 5, 1));
		JButton mapDescriptor1 = new JButton("MD1");
        //JButton mapDescriptor1 = new JButton("Show/Hide Map Descriptor 1");
		JButton mapDescriptor2 = new JButton("MD2");
		JButton resetMapbtn = new JButton("Reset Map");
        JButton solvePathbtn = new JButton("Solve Path");
        JButton terminatebtn = new JButton("Terminate");
        //JButton terminatebtn = new JButton("Terminate Exploration/Solve Path");
        JButton explorationbtn = new JButton("Exploration");
        
        mapDescriptor1.addActionListener(new ActionListener() {
          	 
            public void actionPerformed(ActionEvent e)
            {
                System.out.println("Map Descriptor 1");
                if(md1){
                	md1 = false;
                	mazeMap.removeMapDescriptorOnMaze();
                }
                else{
                	md1 = true;
                	mazeMap.printMapDescriptor1OnMaze();
                	mazeMap.printMapDescriptor1();
                }
            }
        });
        
        mapDescriptor2.addActionListener(new ActionListener() {
          	 
            public void actionPerformed(ActionEvent e)
            {
                System.out.println("Map Descriptor 2");
                if(md2){
                	md2 = false;
                	mazeMap.removeMapDescriptorOnMaze();
                }
                else{
                	md2 = true;
                	mazeMap.printMapDescriptor2OnMaze();
                	mazeMap.printMapDescriptor2();
                }
            }
        });

        explorationbtn.addActionListener(new ActionListener() {
       	 
            public void actionPerformed(ActionEvent e)
            {
                //Execute when button is pressed
            	
            	//Start of Do not remove the code
                System.out.println("Explore");
                explorationStatus = true; 
                stopwatch.startStopwatchTimer(exploreTimeValue, 6);
                dataTimerStart();
                //End of Do not remove the code
                
                Exploration exploration = new Exploration();
                exploration.initRobot(mazeMap, 10, 8);
                mazeMap.setExplorationPath();
                exploration.startExplore();
                mazeMap.startTimer();
            }
        });  
        
        terminatebtn.addActionListener(new ActionListener() {
       	 
            public void actionPerformed(ActionEvent e)
            {
                //Execute when button is pressed
                System.out.println("Terminate all timer");
                stopwatch.stopStopwatchTimer();
                mazeMap.stopTimer();
                dataTimerStop();
            }
        });  
        
        solvePathbtn.addActionListener(new ActionListener() {
       	 
            public void actionPerformed(ActionEvent e)
            {
                //Execute when button is pressed
            	
            	//Start of Do not remove the code
            	System.out.println("Solve Path");
            	fastestPathStatus = true; 
            	stopwatch.startStopwatchTimer(fpTimeValue, 2);
            	mazeMap.startTimer();
                //End of Do not remove the code
            	
                mazeMap.setRobotMidPoint(STARTROW, STARTCOL);
                mazeMap.setRobotOrientation(0);
                Point start = new Point(STARTROW, STARTCOL);
                Point goal = new Point(GOALROW, GOALCOL);
                PathSolver ps = new PathSolver();
                ps.moveRobot(ps.iterativeDeepening(start,goal,mazeMap,mazeMap.getRobotOrientation()),start,goal,mazeMap,mazeMap.getRobotOrientation());
            }
        });  
        
        resetMapbtn.addActionListener(new ActionListener() {
       	 
            public void actionPerformed(ActionEvent e)
            {
                //Execute when button is pressed
                System.out.println("Reset Map");
                mazeMap.resetMap();
                stopwatch.stopStopwatchTimer();
                stopwatch.resetStopwatchTimer();
                exploreTimeValue.setText("00:00");
                fpTimeValue.setText("00:00");
                dataTimerStop();
                mazeMap.removeMapDescriptorOnMaze();
            }
        });  
        
        buttonPanel.add(mapDescriptor1);
        buttonPanel.add(mapDescriptor2);
        buttonPanel.add(resetMapbtn);
        buttonPanel.add(solvePathbtn);
        buttonPanel.add(terminatebtn);
        buttonPanel.add(explorationbtn);
		contentPane.add(buttonPanel, BorderLayout.SOUTH);
		//End of bottom buttons
		
		//Start of right panel
		JPanel rightPanel = new JPanel();
		rightPanel.setLayout(new GridLayout(3, 1, 1, 30));
		rightPanel.setBackground(RIGHTBACKGROUND);
		//rightPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1, true));
		
		JPanel legendPanel = new JPanel();
		legendPanel.setLayout(new GridLayout(5, 2, 3, 5));
		legendPanel.setBackground(Color.WHITE);
		JLabel title = new JLabel("LEGEND");
		title.setFont(title.getFont().deriveFont(14.0F));
		
		JPanel defaultColorRect = new JPanel();
		JPanel exploredColorRect = new JPanel();
		JPanel obstaclesColorRect = new JPanel();
		JPanel robotColorRect = new JPanel();
		
		JLabel defaultLabel = new JLabel("Default");
		JLabel exploredLabel = new JLabel("Explored");
		JLabel obstaclesLabel = new JLabel("Obstacles");
		JLabel robotLabel = new JLabel("Robot");
		
		defaultColorRect.setBackground(DEFAULT);
		exploredColorRect.setBackground(EXPLORED);
		obstaclesColorRect.setBackground(OBSTACLES);
		robotColorRect.setBackground(ROBOT);
		
		legendPanel.add(title);
		legendPanel.add(new JLabel(" "));
		legendPanel.add(defaultColorRect);
		legendPanel.add(defaultLabel);
		legendPanel.add(exploredColorRect);
		legendPanel.add(exploredLabel);
		legendPanel.add(obstaclesColorRect);
		legendPanel.add(obstaclesLabel);
		legendPanel.add(robotColorRect);
		legendPanel.add(robotLabel);
		
		JPanel exploreValuePanel = new JPanel();
		exploreValuePanel.setLayout(new GridLayout(6, 2, 1, 1));
		exploreValuePanel.setBackground(RIGHTBACKGROUND);

		JLabel exploreTitle = new JLabel("EXPLORATION");
		exploreTitle.setFont(exploreTitle.getFont().deriveFont(14.0F));
		JLabel exploreTimelbl = new JLabel("Time: ");
		JLabel explorePercentExploredlbl = new JLabel("% Map: ");
		JLabel explorePercentObstacleslbl = new JLabel("% Obstacles: ");
		JLabel blanklbl = new JLabel(" ");
		
		exploreValuePanel.add(exploreTitle);
		exploreValuePanel.add(blanklbl);
		exploreValuePanel.add(exploreTimelbl);
		exploreValuePanel.add(exploreTimeValue);
		exploreValuePanel.add(explorePercentExploredlbl);
		exploreValuePanel.add(explorePercentExploredValue);
		exploreValuePanel.add(explorePercentObstacleslbl);
		exploreValuePanel.add(explorePercentObstaclesValue);
		
		JLabel fpTitle = new JLabel("FASTEST PATH");
		fpTitle.setFont(exploreTitle.getFont().deriveFont(14.0F));
		JLabel fpTimelbl = new JLabel("Time: ");
		JLabel blanklbl1 = new JLabel(" ");
		
		exploreValuePanel.add(fpTitle);
		exploreValuePanel.add(blanklbl1);
		exploreValuePanel.add(fpTimelbl);
		exploreValuePanel.add(fpTimeValue);
		
		
		JPanel setExploreValuePanel = new JPanel();
		setExploreValuePanel.setLayout(new GridLayout(7, 1, 1, 1));
		
		JLabel setExploreValueTitle = new JLabel("SET EXPLORE VALUE");
		setExploreValueTitle.setFont(setExploreValueTitle.getFont().deriveFont(14.0F));
		JLabel percentObstacleslbl = new JLabel("% of obstacles");
		JTextField percentObstaclestxt = new JTextField();
		JLabel timeLimitlbl = new JLabel("Time Limit");
		JTextField timeLimittxt = new JTextField();
		
		percentObstaclestxt.setMaximumSize(new Dimension(1000, 500));
		
		setExploreValuePanel.add(setExploreValueTitle);
		setExploreValuePanel.add(percentObstacleslbl);
		setExploreValuePanel.add(percentObstaclestxt);
		setExploreValuePanel.add(timeLimitlbl);
		setExploreValuePanel.add(timeLimittxt);
		
		rightPanel.add(legendPanel);
		rightPanel.add(exploreValuePanel);
		rightPanel.add(setExploreValuePanel);
		contentPane.add(rightPanel, BorderLayout.EAST);
		//End of right panel
		
		frame.setVisible(true);
	}
	
	private static void dataTimerStart(){
		final DecimalFormat df = new DecimalFormat();
		df.setMaximumFractionDigits(2);
		dataTimer = new Timer(1000, new ActionListener() {
		      public void actionPerformed(ActionEvent evt) {
		    	  explorePercentExploredValue.setText(df.format(mazeMap.percentageExplored()) + "%");
			}
		});
		dataTimer.start(); 
	}
	
	private static void dataTimerStop(){
		if(dataTimer.isRunning())
			dataTimer.stop(); 
		else
			System.out.println("No stopwatch");
	}
}
