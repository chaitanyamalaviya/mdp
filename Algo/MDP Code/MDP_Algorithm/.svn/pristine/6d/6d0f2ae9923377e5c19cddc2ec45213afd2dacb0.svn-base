package mdp.algorithm.explore;

import mdp.algorithm.simulator.*;

public class Exploration {
	
	private int robotMidPointRow, robotMidPointCol; //Robot's current position
	private int sensorF1LocationRow, sensorF1LocationCol, sensorF2LocationRow, sensorF2LocationCol, sensorF3LocationRow, sensorF3LocationCol;//Three sensors for front
	private int sensorLeftLocationRow, sensorLeftLocationCol, sensorRightLocationRow, sensorRightLocationCol; //One left and one right sensor (MID)
	private int virtualMap[][]; //Creating a virtual memory for the robot to remember
	
	private static final int MAP_ROW = 21, MAP_COL = 16;
	private static final int UNKNOWN = 0, EXPLORED = 1, OBSTACLES = 2;
	
	private Maze maze;
	
	//Initializing necessary components for the robot to explore.
	public void initRobot(Maze maze, int startRow, int startCol) {
		this.maze = maze;
		maze.setRobotMidPoint(startRow, startCol);
		robotMidPointRow = this.maze.getRobotMidPointRow();
		robotMidPointCol = this.maze.getRobotMidPointCol();
		initSensorLocations();
		System.out.println("Sensors Initialised.");
		initObstacles();
		
		initVirtualMap();
		System.out.println("Virtual Map Initialised.");
		
		System.out.println("Obstacles Ready.");
		System.out.println("Robot Operationally Ready.");
		
		System.out.println("\n");
		for (int row = 0; row < MAP_ROW; row++) {
			for (int col = 0; col < MAP_COL; col++)
				System.out.print(virtualMap[row][col] + "	");
			System.out.println("\n");
		}
	}
	
	//Initializing virtual map
	private void initVirtualMap() {
		virtualMap = new int[MAP_ROW][MAP_COL];
		
		for (int row = 0; row < MAP_ROW; row++)
			for (int col = 0; col < MAP_COL; col++)
				virtualMap[row][col] = UNKNOWN;
		
		virtualMap[robotMidPointRow-1][robotMidPointCol-1] = EXPLORED;
		virtualMap[robotMidPointRow-1][robotMidPointCol] = EXPLORED;
		virtualMap[robotMidPointRow-1][robotMidPointCol+1] = EXPLORED;
		
		virtualMap[robotMidPointRow][robotMidPointCol-1] = EXPLORED;
		virtualMap[robotMidPointRow][robotMidPointCol] = EXPLORED;
		virtualMap[robotMidPointRow][robotMidPointCol+1] = EXPLORED;
		
		virtualMap[robotMidPointRow+1][robotMidPointCol-1] = EXPLORED;
		virtualMap[robotMidPointRow+1][robotMidPointCol] = EXPLORED;
		virtualMap[robotMidPointRow+1][robotMidPointCol+1] = EXPLORED;
		
		isFrontBlocked();
		isLeftBlocked();
		isRightBlocked();
		
	}
	
	//Initializing robot's sensor
	private void initSensorLocations() {
		int row, col;
		switch(maze.getRobotOrientation()) {
		//NORTH
		case 0:	row = robotMidPointRow-2;
				sensorF1LocationRow = sensorF2LocationRow = sensorF3LocationRow = row;
				sensorF1LocationCol = robotMidPointCol-1;
				sensorF2LocationCol = robotMidPointCol;
				sensorF3LocationCol = robotMidPointCol+1;
				
				sensorLeftLocationRow = sensorRightLocationRow = robotMidPointRow;
				sensorLeftLocationCol = robotMidPointCol-2;
				sensorRightLocationCol = robotMidPointCol+2;
				break;
		//EAST
		case 1:	col = robotMidPointCol+2;
				sensorF1LocationCol = sensorF2LocationCol = sensorF3LocationCol = col;
				sensorF1LocationRow = robotMidPointRow-1;
				sensorF2LocationRow = robotMidPointRow;
				sensorF3LocationRow = robotMidPointRow+1;
				
				sensorLeftLocationCol = sensorRightLocationCol = robotMidPointCol;
				sensorLeftLocationRow = robotMidPointRow-2;
				sensorRightLocationRow = robotMidPointRow+2;
				break;
		//SOUTH
		case 2:	row = robotMidPointRow+2;
				sensorF1LocationRow = sensorF2LocationRow = sensorF3LocationRow = row;
				sensorF1LocationCol = robotMidPointCol+1;
				sensorF2LocationCol = robotMidPointCol;
				sensorF3LocationCol = robotMidPointCol-1;
				
				sensorLeftLocationRow = sensorRightLocationRow = robotMidPointRow;
				sensorLeftLocationCol = robotMidPointCol+2;
				sensorRightLocationCol = robotMidPointCol-2;
				break;
		//WEST
		default:col = robotMidPointCol-2;
				sensorF1LocationCol = sensorF2LocationCol = sensorF3LocationCol = col;
				sensorF1LocationRow = robotMidPointRow+1;
				sensorF2LocationRow = robotMidPointRow;
				sensorF3LocationRow = robotMidPointRow-1;
				
				sensorLeftLocationCol = sensorRightLocationCol = robotMidPointCol;
				sensorLeftLocationRow = robotMidPointRow+2;
				sensorRightLocationRow = robotMidPointRow-2;
				break;
		}
		System.out.println("Telemetric Information Updated.");
	}
	
	//Loading initial obstacles
	private void initObstacles() {
		maze.setObstacles(7,7);
		maze.setObstacles(7,8);
		maze.setObstacles(7,9);
		maze.setObstacles(robotMidPointRow,robotMidPointCol+2);
	}
	
	//Method to ask the robot to start exploring.
	public void startExplore() {
		//initial check
		System.out.println("Begin Explore");
		nextStep();		
	}
	
	//AI for robot to decide what the next move should be.
	private boolean nextStep() {
		if (isFrontBlocked()) {
			spinRight();
		}
		else {
			moveForward();
		}
		return true;
	}
	
	private void stop() {
		System.out.println("Stop");
	}
	
	private boolean isFrontBlocked() {
		boolean hasObstacles = (maze.checkObstacle(sensorF1LocationRow, sensorF1LocationCol) || 
				maze.checkObstacle(sensorF2LocationRow, sensorF2LocationCol) || 
						maze.checkObstacle(sensorF3LocationRow, sensorF3LocationCol));
		
		if (maze.checkObstacle(sensorF1LocationRow, sensorF1LocationCol))
			maze.addObstacles(sensorF1LocationRow, sensorF1LocationCol);
		if (maze.checkObstacle(sensorF2LocationRow, sensorF2LocationCol))
			maze.addObstacles(sensorF2LocationRow, sensorF2LocationCol);
		if (maze.checkObstacle(sensorF3LocationRow, sensorF3LocationCol))
			maze.addObstacles(sensorF3LocationRow, sensorF3LocationCol);
		
		return hasObstacles;
	}
	
	private boolean isLeftBlocked() {
		boolean hasObstacles = maze.checkObstacle(sensorLeftLocationRow, sensorLeftLocationCol);
		
		if (hasObstacles)
			maze.addObstacles(sensorLeftLocationRow, sensorLeftLocationCol);
		
		virtualMap[sensorLeftLocationRow][sensorLeftLocationCol] = (hasObstacles ? OBSTACLES : EXPLORED);
		
		return hasObstacles;
	}

	private boolean isRightBlocked() {
		boolean hasObstacles = maze.checkObstacle(sensorRightLocationRow, sensorRightLocationCol);
		
		if (hasObstacles)
			maze.addObstacles(sensorRightLocationRow, sensorRightLocationCol);
		
		virtualMap[sensorRightLocationRow][sensorRightLocationCol] = (hasObstacles ? OBSTACLES : EXPLORED);
		
		return hasObstacles;
	}
	
	private void moveForward() {
		maze.moveForward();
		switch(maze.getRobotOrientation()) {
		case 0:	robotMidPointRow-=1;
				break;
		case 1:	robotMidPointCol+=1;
				break;
		case 2: robotMidPointRow+=1;
				break;
		default:robotMidPointCol-=1;
		}
		initSensorLocations();
		System.out.println("Advanced one grid.");
	}
	
	private void spinRight() {
		maze.spinRight();
		initSensorLocations();
	}
	
	private void backtrack() {
		
	}
	
}
