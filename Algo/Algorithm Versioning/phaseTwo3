package mdp.algorithm.explore;

import java.awt.Point;
import java.util.ArrayList;
import java.util.Stack;

import mdp.algorithm.fastestPath.PathSolver;
import mdp.algorithm.simulator.*;

public class Exploration {
	
	private int robotOrientation;
	private int robotMidPointRow, robotMidPointCol; //Robot's current position
	private int verticalCounter, horizontalCounter, operator;
	private int sensorF1LocationRow, sensorF1LocationCol, sensorF2LocationRow, sensorF2LocationCol, sensorF3LocationRow, sensorF3LocationCol;//Three sensors for front
	private int sensorL1LocationRow, sensorL1LocationCol, sensorL2LocationRow, sensorL2LocationCol; //Left Sensors 
	private int sensorR1LocationRow, sensorR1LocationCol, sensorR2LocationRow, sensorR2LocationCol; //Right sensor (MID)
	private int virtualMap[][]; //Creating a virtual memory for the robot to remember
	
	private static final int MAP_ROW = 22, MAP_COL = 17;
	private static final int UNKNOWN = 0, EXPLORED = 1, OBSTACLES = 2, ROBOTPOSITION = 3 ;
	private static final int NORTH = 0, EAST = 1, SOUTH = 2, WEST = 3;
	
	private Maze maze;
	
	
	
	//Start exploring.
	public boolean startExplore() {
		System.out.println("Begin Explore");
		if (mapCoverage() == MAP_ROW*MAP_COL){
			System.out.println("Maze Complete");//return false;
			return false;
		}
		else {
			//Point phase1 = phaseOne(new Point(0,0), new Stack<Point>());
			//System.out.println("Phase 1 Completed.");
			printVirtualMap();
			phaseTwo(new Point(robotMidPointRow, robotMidPointCol), new Stack<Point>());
			System.out.println("Current Point: (" + robotMidPointRow + "," + robotMidPointCol + ")");
			//PathSolver ps = new PathSolver();
			//ps.moveRobot(ps.iterativeDeepening(virtualMidPoint(), new Point(19,2), maze, maze.getRobotOrientation()), virtualMidPoint(), new Point(19,2), maze, maze.getRobotOrientation());
			System.out.println("Final Map in Memory:\n");
			printVirtualMap();
		}	
		return true;
	}
	
	public boolean startExplore(double requiredCoverage) {
		if ((mapCoverage()/(MAP_ROW*MAP_COL)) >= requiredCoverage){
			System.out.println("Maze Complete");//return false;
			return false;
		}
		else {
			//Point phase1 = phaseOne(new Point(0,0), new Stack<Point>());
			System.out.println("Phase 1 Completed.");
			printVirtualMap();
			phaseTwo(new Point(robotMidPointRow, robotMidPointCol), new Stack<Point>());
			System.out.println("Current Point: (" + robotMidPointRow + "," + robotMidPointCol + ")");
			//PathSolver ps = new PathSolver();
			//ps.moveRobot(ps.iterativeDeepening(virtualMidPoint(), new Point(19,2), maze, maze.getRobotOrientation()), virtualMidPoint(), new Point(19,2), maze, maze.getRobotOrientation());
			System.out.println("Final Map in Memory:\n");
			printVirtualMap();
		}	
		return true;
	}
	
	public boolean stop() {
		System.out.println("Stop");
		return false;
	}
	
	/*private Point phaseOne(Point displacement, Stack<Point> visited) {
		Point tempPoint = new Point();
		visited.add(displacement);
		if (atEdge(displacement))
			return displacement;
		else {
			tempPoint.setLocation((int)displacement.getX()+1, (int)displacement.getY());
			if (!isFrontBlocked() && !atEdge(displacement) && !visited.contains(tempPoint)) {
				moveForward();
				displacement = phaseOne(tempPoint, visited);
			} 
			tempPoint.setLocation((int)displacement.getX(), (int)displacement.getY()+1);
			if(!isRightBlocked() && !atEdge(displacement) && !visited.contains(tempPoint)) {
				spinRight();
				moveForward();
				spinLeft();
				displacement = phaseOne(tempPoint, visited);
			}
			tempPoint.setLocation((int)displacement.getX(), (int)displacement.getY()-1);
			if (!isLeftBlocked() && !atEdge(displacement) && !visited.contains(tempPoint)) {
				spinLeft();
				moveForward();
				spinRight();
				displacement = phaseOne(tempPoint, visited);
			}
			tempPoint.setLocation((int)displacement.getX()-1, (int)displacement.getY());
			if (!atEdge(displacement) && !visited.contains(tempPoint)) {
				spinRight();
				spinRight();
				moveForward();
				spinRight();
				spinRight();
				displacement = phaseOne(tempPoint, visited);
			}
			return displacement;
		}
	}*/
	
	//
	private void phaseTwo(Point current, Stack<Point> visited) {
		if (hasPath())
			return;
		int currentOrientation = robotOrientation;
		
		Point leftCurrent = new Point(), rightCurrent = new Point();
		Point tempPoint = new Point();
		
		switch(currentOrientation) {
			case NORTH:	
			case SOUTH: leftCurrent.setLocation(current.getX(), current.getY()-1);
						rightCurrent.setLocation(current.getX(), current.getY()+1);
						break;
			case EAST:	
			case WEST:	leftCurrent.setLocation(current.getX()-1, current.getY());
						rightCurrent.setLocation(current.getX()+1, current.getY());
						break;
		}
		
		if (!isFrontBlocked()) {
			System.out.println("Advanced a Grid.");
			//currentOrientation = robotOrientation;
			switch(robotOrientation) {
				case NORTH:	tempPoint.setLocation(current.getX()-1, current.getY());
							break;
				case EAST:	tempPoint.setLocation(current.getX(), current.getY()+1);
							break;
				case WEST:	tempPoint.setLocation(current.getX(), current.getY()-1);
							break;
				case SOUTH:	tempPoint.setLocation(current.getX()+1, current.getY());
							break;
			}
			if (!visited.contains(tempPoint)) {
				moveForward();
				visited.add(leftCurrent);
				visited.add(current);
				visited.add(rightCurrent);
				phaseTwo(tempPoint, visited);
			}
			if (hasPath())
				return;
		}

		switch(currentOrientation) {
			case NORTH:
						switch(robotOrientation) {
							case NORTH:
										if (hasClearRightPath()) {
											spinRight();
											System.out.println("Turned Right");
											tempPoint.setLocation(current.getX(), current.getY()+1);
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case EAST:
										if (!isFrontBlocked()) {
											System.out.println("Checking Front.");
											tempPoint.setLocation(current.getX(), current.getY()+1);
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case WEST:
										spinRight();
										spinRight();
										System.out.println("U-turned");
										if (!isFrontBlocked()) {
											tempPoint.setLocation(current.getX(), current.getY()+1);
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case SOUTH:
										if (hasClearLeftPath()) {
											spinLeft();
											System.out.println("Turned Left");
											tempPoint.setLocation(current.getX(), current.getY()+1);
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
						}
						break;
			case EAST:
						switch(robotOrientation) {
							case NORTH:
										spinRight();
										spinRight();
										System.out.println("U-turned");
										if (!isFrontBlocked()) {
											tempPoint.setLocation(current.getX()+1, current.getY());
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case EAST:
										if (hasClearRightPath()) {
											spinRight();
											System.out.println("Turned Right");
											tempPoint.setLocation(current.getX()+1, current.getY());
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case SOUTH:
										if (!isFrontBlocked()) {
											System.out.println("Checking Front.");
											tempPoint.setLocation(current.getX()+1, current.getY());
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case WEST:	
										if (hasClearLeftPath()) {
											spinLeft();
											System.out.println("Turned Left");
											tempPoint.setLocation(current.getX()+1, current.getY());
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
						}
						break;
			case WEST:
						switch(robotOrientation) {
							case NORTH:
										if (!isFrontBlocked()) {
											System.out.println("Checking Front.");
											tempPoint.setLocation(current.getX()-1, current.getY());
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case WEST:
										if (hasClearRightPath()) {
											spinRight();
											System.out.println("Turned Right");
											tempPoint.setLocation(current.getX()-1, current.getY());
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case SOUTH:
										spinRight();
										spinRight();
										if (!isFrontBlocked()) {
											System.out.println("Checking Front.");
											tempPoint.setLocation(current.getX()-1, current.getY());
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case EAST:	
										if (hasClearLeftPath()) {
											spinLeft();
											System.out.println("Turned Left");
											tempPoint.setLocation(current.getX()-1, current.getY());
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
						}
						break;
			case SOUTH:
						switch(robotOrientation) {
							case NORTH:
										if (hasClearLeftPath()) {
											spinLeft();
											System.out.println("Turned Left");
											tempPoint.setLocation(current.getX(), current.getY()-1);
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case EAST:
										spinRight();
										spinRight();
										if (!isFrontBlocked()) {
											System.out.println("Checking Front.");
											tempPoint.setLocation(current.getX(), current.getY()-1);
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case WEST:
										if (!isFrontBlocked()) {
											System.out.println("Checking Front.");
											tempPoint.setLocation(current.getX(), current.getY()-1);
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											}
										}
										break;
							case SOUTH:
										if (hasClearRightPath()) {
											spinRight();
											System.out.println("Turned Right");
											tempPoint.setLocation(current.getX(), current.getY()-1);
											if (!visited.contains(tempPoint)) {
												currentOrientation = robotOrientation;
												phaseTwo(tempPoint, visited);
												if (hasPath())
													return;
											} /*else {
												spinLeft();
												System.out.println("Turned Back to Left");
											}*/
										}
										break;
						}
						break;
		}
		
		switch(currentOrientation) {
		case NORTH:
					switch(robotOrientation) {
						case NORTH:
									if (hasClearLeftPath()) {
										spinLeft();
										System.out.println("Turned Left");
										tempPoint.setLocation(current.getX(), current.getY()-1);
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
						case EAST:
									spinRight();
									spinRight();
									System.out.println("U-turned");
									if (!isFrontBlocked()) {
										tempPoint.setLocation(current.getX(), current.getY()-1);
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
						case WEST:
									if (!isFrontBlocked()) {
										System.out.println("Checking Front.");
										tempPoint.setLocation(current.getX(), current.getY()-1);
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
						case SOUTH:	
									if (hasClearRightPath()) {
										spinRight();
										System.out.println("Turned Right");
										tempPoint.setLocation(current.getX(), current.getY()-1);
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
					}
					break;
		case EAST:
					switch(robotOrientation) {
						case NORTH:
									if (!isFrontBlocked()) {
										System.out.println("Checking Front.");
										tempPoint.setLocation(current.getX()-1, current.getY());
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
						case EAST:
									if (hasClearLeftPath()) {
										spinLeft();
										System.out.println("Turned Left");
										tempPoint.setLocation(current.getX()-1, current.getY());
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
						case SOUTH:
									spinRight();
									spinRight();
									System.out.println("U-turned");
									if (!isFrontBlocked()) {
										tempPoint.setLocation(current.getX()-1, current.getY());
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
						case WEST:	
									if (hasClearRightPath()) {
										spinRight();
										System.out.println("Turned Right");
										tempPoint.setLocation(current.getX()-1, current.getY());
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
					}
					break;
		case WEST:
					switch(robotOrientation) {
						case NORTH:
									spinRight();
									spinRight();
									if (!isFrontBlocked()) {
										System.out.println("Checking Front.");
										tempPoint.setLocation(current.getX()+1, current.getY());
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
						case WEST:
									if (hasClearLeftPath()) {
										spinLeft();
										System.out.println("Turned Left");
										tempPoint.setLocation(current.getX()+1, current.getY());
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
						case SOUTH:
									if (!isFrontBlocked()) {
										System.out.println("Checking Front.");
										tempPoint.setLocation(current.getX()+1, current.getY());
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
						case EAST:	
									if (hasClearRightPath()) {
										spinRight();
										System.out.println("Turned Right");
										tempPoint.setLocation(current.getX()+1, current.getY());
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
					}
					break;
		case SOUTH:
					switch(robotOrientation) {
						case NORTH:
									if (hasClearRightPath()) {
										spinRight();
										System.out.println("Turned Right");
										tempPoint.setLocation(current.getX(), current.getY()+1);
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										} 
									}
									break;
						case EAST:
									if (!isFrontBlocked()) {
										System.out.println("Checking Front.");
										tempPoint.setLocation(current.getX(), current.getY()+1);
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
						case WEST:
									spinRight();
									spinRight();
									if (!isFrontBlocked()) {
										System.out.println("Checking Front.");
										tempPoint.setLocation(current.getX(), current.getY()+1);
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
						case SOUTH:
									if (hasClearLeftPath()) {
										spinLeft();
										System.out.println("Turned Left");
										tempPoint.setLocation(current.getX(), current.getY()+1);
										if (!visited.contains(tempPoint)) {
											currentOrientation = robotOrientation;
											phaseTwo(tempPoint, visited);
											if (hasPath())
												return;
										}
									}
									break;
					}
					break;
	}
		
		/*if (hasClearRightPath()) {
			spinRight();
			System.out.println("Turned Right");
			switch(robotOrientation) {
				case NORTH:	tempPoint.setLocation(current.getX()-1, current.getY());
							break;
				case EAST:	tempPoint.setLocation(current.getX(), current.getY()+1);
							break;
				case WEST:	tempPoint.setLocation(current.getX(), current.getY()-1);
							break;
				case SOUTH:	tempPoint.setLocation(current.getX()+1, current.getY());
							break;
			}
			if (!visited.contains(tempPoint)) {
				currentOrientation = robotOrientation;
				phaseTwo(tempPoint, visited);
				if (hasPath())
					return;
			} else if((currentOrientation+3)%4 != robotOrientation) {
				spinLeft();
				System.out.println("Turned Back to Left");
			}
			
		}*/

		/*if (hasClearLeftPath()) {
			spinLeft();
			System.out.println("Turned Left");
			switch(robotOrientation) {
				case NORTH:	tempPoint.setLocation(current.getX()-1, current.getY());
							break;
				case EAST:	tempPoint.setLocation(current.getX(), current.getY()+1);
							break;
				case WEST:	tempPoint.setLocation(current.getX(), current.getY()-1);
							break;
				case SOUTH:	tempPoint.setLocation(current.getX()+1, current.getY());
							break;
			}
			if (!visited.contains(tempPoint)) {
				currentOrientation = robotOrientation;
				phaseTwo(tempPoint, visited);
				if (hasPath())
					return;
			} else if ((currentOrientation+1)%4 != robotOrientation) {
				spinRight();
				System.out.println("Turned Back to Right");
			}
		}*/
		
		//backtracking
		switch(currentOrientation) {
			case NORTH:
						switch(robotOrientation) {
							case NORTH:
										spinRight();
										spinRight();
										break;
							case EAST:
										spinRight();
										break;
							case WEST:
										spinLeft();
										break;
						}
						
						break;
			case EAST:
						switch(robotOrientation) {
							case NORTH:
										spinLeft();
										break;
							case EAST:
										spinRight();
										spinRight();
										break;
							case SOUTH:
										spinRight();
										break;
						}
						break;
			case WEST:
						switch(robotOrientation) {
							case NORTH:
										spinRight();
										break;
							case WEST:
										spinRight();
										spinRight();
										break;
							case SOUTH:
										spinLeft();
										break;
						}
						break;
			case SOUTH:
						switch(robotOrientation) {
							case EAST:
										spinLeft();
										break;
							case WEST:
										spinRight();
										break;
							case SOUTH:
										spinRight();
										spinRight();
										break;
						}
						break;
		}
		visited.pop();
		visited.pop();
		visited.pop();
		moveForward();
		return;
	}
	
	private boolean atEdge(Point displacement) {
		return (displacement.getX() == 8 || displacement.getX() == -9) || (displacement.getY() == 6 || displacement.getY() == -6);
	}

	/*
	 * DO NOT MAKE ANY CHANGES FROM HERE ON.
	 */
	
	private boolean hasPath() {
		if (((virtualMap[17][1]%2 == 1 && virtualMap[17][2]%2 == 1 && virtualMap[17][3]%2 == 1) || (virtualMap[18][4]%2 == 1 && virtualMap[19][4]%2 == 1 && virtualMap[20][4] %2== 1)) && 
				((virtualMap[1][12]%2 == 1 && virtualMap[2][12]%2 == 1 && virtualMap[3][12]%2 == 1)|| (virtualMap[4][13]%2 == 1 && virtualMap[4][14]%2 == 1 && virtualMap[4][15]%2 == 1)))
			return true;
		else
			return false;
	}
	private int mapCoverage() {
		int gridsCovered = 0;
		for (int i = 1; i < MAP_ROW-1; i++)
			for (int j = 1; j < MAP_COL-1; j++) {
				if (virtualMap[i][j] != 0)
					gridsCovered++;
			}
		return gridsCovered;
	}
	
	//default methods
	private void printVirtualMap() {
		System.out.println("\n");
		for (int row = 0; row < MAP_ROW; row++) {
			for (int col = 0; col < MAP_COL; col++)
				System.out.print(virtualMap[row][col] + "	");
			System.out.println("\n");
		}
	}
	
	private Point getVirtualMidPoint() {
		int x=-1, y=-1;
		for (int i = 0; i < MAP_ROW; i++) {
			for (int j = 0; j < MAP_COL; j++) {
				if (virtualMap[i][j] == 3) {
					x = i+1;
					y = j+1;
					break;
				}
			}
			if (x != -1 && y != -1)
				break;
		}
		return new Point(x, y);
	}
	
	private boolean hasClearLeftPath() {
		boolean clear = false;
		int currentX = robotMidPointRow, currentY = robotMidPointCol;
		switch(robotOrientation) {
			case NORTH:
						if (virtualMap[currentX-1][currentY-2] == 1 && 
							virtualMap[currentX][currentY-2] == 1 && 
							virtualMap[currentX+1][currentY-2] == 1) {
							clear = true;
						}
						break;
			case EAST:
						if (virtualMap[currentX-2][currentY-1] == 1 && 
							virtualMap[currentX-2][currentY] == 1 && 
							virtualMap[currentX-2][currentY+1] == 1)
							clear = true;
						break;
			case WEST:
						if (virtualMap[currentX+2][currentY-1] == 1 && 
							virtualMap[currentX+2][currentY] == 1 && 
							virtualMap[currentX+2][currentY+1] == 1)
							clear = true;
						break;
			case SOUTH:
						if (virtualMap[currentX-1][currentY+2] == 1 && 
							virtualMap[currentX][currentY+2] == 1 && 
							virtualMap[currentX+1][currentY+2] == 1)
							clear = true;
						break;
		}
		return clear;
	}	
	private boolean hasClearRightPath() {
		boolean clear = false;
		int currentX = robotMidPointRow, currentY = robotMidPointCol;
		System.out.println("hasClearRightPath: " + currentX + "," + currentY);
		switch(robotOrientation) {
			case NORTH:
						if (virtualMap[currentX-1][currentY+2] == 1 && 
							virtualMap[currentX][currentY+2] == 1 && 
							virtualMap[currentX+1][currentY+2] == 1)
							clear = true;
						break;
			case EAST:
						if (virtualMap[currentX+2][currentY-1] == 1 && 
							virtualMap[currentX+2][currentY] == 1 && 
							virtualMap[currentX+2][currentY+1] == 1)
							clear = true;
						break;
			case WEST:
						if (virtualMap[currentX-2][currentY-1] == 1 && 
							virtualMap[currentX-2][currentY] == 1 && 
							virtualMap[currentX-2][currentY+1] == 1)
							clear = true;
						break;
			case SOUTH:
						if (virtualMap[currentX-1][currentY-2] == 1 && 
							virtualMap[currentX][currentY-2] == 1 && 
							virtualMap[currentX+1][currentY-2] == 1)
							clear = true;
						break;
		}
		return clear;
	}
	
	private boolean hasClearFrontPath() {
		return false;
	}
	
	private boolean hasClearBackPath() {
		return false;
	}
	
	/* Robot's Action */
	private boolean isFrontBlocked() {
		boolean hasObstacles = (maze.checkObstacle(sensorF1LocationRow, sensorF1LocationCol) || 
				maze.checkObstacle(sensorF2LocationRow, sensorF2LocationCol) || 
						maze.checkObstacle(sensorF3LocationRow, sensorF3LocationCol));
		System.out.println("Currently Sensing: \nF: (" + sensorF1LocationRow + ", " + sensorF1LocationCol + "), (" + sensorF2LocationRow + ", " + sensorF2LocationCol + "), (" + sensorF3LocationRow + ", " + sensorF3LocationCol + ")");
		virtualMap[sensorF1LocationRow][sensorF1LocationCol] = (maze.checkObstacle(sensorF1LocationRow, sensorF1LocationCol) ? OBSTACLES : EXPLORED);
		virtualMap[sensorF2LocationRow][sensorF2LocationCol] = (maze.checkObstacle(sensorF2LocationRow, sensorF2LocationCol) ? OBSTACLES : EXPLORED);
		virtualMap[sensorF3LocationRow][sensorF3LocationCol] = (maze.checkObstacle(sensorF3LocationRow, sensorF3LocationCol) ? OBSTACLES : EXPLORED);
		
		return hasObstacles;
	}
	
	private boolean isLeftBlocked() {
		boolean hasObstacles = maze.checkObstacle(sensorL1LocationRow, sensorL1LocationCol) || maze.checkObstacle(sensorL2LocationRow, sensorL2LocationCol);
		System.out.println("L: (" + sensorL1LocationRow + ", " + sensorL1LocationCol + "), (" + sensorL2LocationRow + ", " + sensorL2LocationCol + ")");
		virtualMap[sensorL1LocationRow][sensorL1LocationCol] = (maze.checkObstacle(sensorL1LocationRow, sensorL1LocationCol) ? OBSTACLES : EXPLORED);
		virtualMap[sensorL2LocationRow][sensorL2LocationCol] = (maze.checkObstacle(sensorL2LocationRow, sensorL2LocationCol) ? OBSTACLES : EXPLORED);
		
		return hasObstacles;
	}

	private boolean isRightBlocked() {
		boolean hasObstacles = maze.checkObstacle(sensorR1LocationRow, sensorR1LocationCol) || maze.checkObstacle(sensorR2LocationRow, sensorR2LocationCol);
		System.out.println("R: (" + sensorR1LocationRow + ", " + sensorR1LocationCol + "), (" + sensorR2LocationRow + ", " + sensorR2LocationCol + ")");
		virtualMap[sensorR1LocationRow][sensorR1LocationCol] = (maze.checkObstacle(sensorR1LocationRow, sensorR1LocationCol) ? OBSTACLES : EXPLORED);
		virtualMap[sensorR2LocationRow][sensorR2LocationCol] = (maze.checkObstacle(sensorR2LocationRow, sensorR2LocationCol) ? OBSTACLES : EXPLORED);
		
		return hasObstacles;
	}
	
	
	private void moveForward() {
		if (!isFrontBlocked()) {
			maze.moveForward();
			switch(robotOrientation) {
			case NORTH:	--robotMidPointRow;
					virtualMap[robotMidPointRow-1][robotMidPointCol-1] = ROBOTPOSITION;
					virtualMap[robotMidPointRow-1][robotMidPointCol] = ROBOTPOSITION;
					virtualMap[robotMidPointRow-1][robotMidPointCol+1] = ROBOTPOSITION;
					
					virtualMap[robotMidPointRow+2][robotMidPointCol-1] = EXPLORED;
					virtualMap[robotMidPointRow+2][robotMidPointCol] = EXPLORED;
					virtualMap[robotMidPointRow+2][robotMidPointCol+1] = EXPLORED;
					break;
			case EAST:	++robotMidPointCol;
					virtualMap[robotMidPointRow+1][robotMidPointCol+1] = ROBOTPOSITION;
					virtualMap[robotMidPointRow][robotMidPointCol+1] = ROBOTPOSITION;
					virtualMap[robotMidPointRow-1][robotMidPointCol+1] = ROBOTPOSITION;
					
					virtualMap[robotMidPointRow+1][robotMidPointCol-2] = EXPLORED;
					virtualMap[robotMidPointRow][robotMidPointCol-2] = EXPLORED;
					virtualMap[robotMidPointRow-1][robotMidPointCol-2] = EXPLORED;
					break;
			case SOUTH: ++robotMidPointRow;
					virtualMap[robotMidPointRow+1][robotMidPointCol-1] = ROBOTPOSITION;
					virtualMap[robotMidPointRow+1][robotMidPointCol] = ROBOTPOSITION;
					virtualMap[robotMidPointRow+1][robotMidPointCol+1] = ROBOTPOSITION;
					
					virtualMap[robotMidPointRow-2][robotMidPointCol-1] = EXPLORED;
					virtualMap[robotMidPointRow-2][robotMidPointCol] = EXPLORED;
					virtualMap[robotMidPointRow-2][robotMidPointCol+1] = EXPLORED;
					break;
			case WEST:--robotMidPointCol;
					virtualMap[robotMidPointRow+1][robotMidPointCol-1] = ROBOTPOSITION;
					virtualMap[robotMidPointRow][robotMidPointCol-1] = ROBOTPOSITION;
					virtualMap[robotMidPointRow-1][robotMidPointCol-1] = ROBOTPOSITION;
					
					virtualMap[robotMidPointRow+1][robotMidPointCol+2] = EXPLORED;
					virtualMap[robotMidPointRow][robotMidPointCol+2] = EXPLORED;
					virtualMap[robotMidPointRow-1][robotMidPointCol+2] = EXPLORED;
			}
			System.out.println("Advanced one grid.");
			initSensorLocations();
			isFrontBlocked();
			isLeftBlocked();
			isRightBlocked();
		} else
			System.out.println("Advance failed.");
	}
	
	private void spinRight() {
		maze.spinRight();
		robotOrientation = (robotOrientation + 1)%4;
		System.out.println("Turned Right.");
		initSensorLocations();
		isFrontBlocked();
		isLeftBlocked();
		isRightBlocked();
	}
	
	private void spinLeft() {
		maze.spinLeft();
		robotOrientation = (robotOrientation + 3) % 4;
		System.out.println("Turned Left.");
		initSensorLocations();
		isFrontBlocked();
		isLeftBlocked();
		isRightBlocked();
	}
	
	/* Loading Robot's Component */
	
	//Initializing necessary components for the robot to explore.
	public void initRobot(Maze maze, int startRow, int startCol) {
		this.maze = maze;
		maze.setRobotMidPoint(startRow, startCol);
		robotMidPointRow = this.maze.getRobotMidPointRow();
		robotMidPointCol = this.maze.getRobotMidPointCol();
		robotOrientation = maze.getRobotOrientation();
		initSensorLocations();
		System.out.println("Sensors Initialised.");
		initObstacles();
		
		initVirtualMap();
		System.out.println("Virtual Map Initialised.");
		
		System.out.println("Obstacles Ready.");
		System.out.println("Robot Operationally Ready.");
		
		printVirtualMap();
		System.out.println("---- Ready to Explore! --------");
	}
	
	//Initializing virtual map
	private void initVirtualMap() {
		virtualMap = new int[MAP_ROW][MAP_COL];
		
		for (int row = 0; row < MAP_ROW; row++)
			for (int col = 0; col < MAP_COL; col++)
				virtualMap[row][col] = UNKNOWN;
		
		virtualMap[robotMidPointRow-1][robotMidPointCol-1] = ROBOTPOSITION;
		virtualMap[robotMidPointRow-1][robotMidPointCol] = ROBOTPOSITION;
		virtualMap[robotMidPointRow-1][robotMidPointCol+1] = ROBOTPOSITION;
		
		virtualMap[robotMidPointRow][robotMidPointCol-1] = ROBOTPOSITION;
		virtualMap[robotMidPointRow][robotMidPointCol] = ROBOTPOSITION;
		virtualMap[robotMidPointRow][robotMidPointCol+1] = ROBOTPOSITION;
		
		virtualMap[robotMidPointRow+1][robotMidPointCol-1] = ROBOTPOSITION;
		virtualMap[robotMidPointRow+1][robotMidPointCol] = ROBOTPOSITION;
		virtualMap[robotMidPointRow+1][robotMidPointCol+1] = ROBOTPOSITION;
		
		isFrontBlocked();
		isLeftBlocked();
		isRightBlocked();
		
	}
	
	private void initSensorLocations() {
		int row, col;
		System.out.println("Robot's Current Orientation: " + (robotOrientation == NORTH ? "NORTH" : (robotOrientation == SOUTH ? "SOUTH" : (robotOrientation == EAST ? "EAST" : "WEST"))));
		switch(robotOrientation) {
			case NORTH:	
					row = robotMidPointRow-2;
					sensorF1LocationRow = sensorF2LocationRow = sensorF3LocationRow = row;
					sensorF1LocationCol = robotMidPointCol-1;
					sensorF2LocationCol = robotMidPointCol;
					sensorF3LocationCol = robotMidPointCol+1;
					
					sensorL1LocationRow = sensorR1LocationRow = robotMidPointRow-1;
					sensorL2LocationRow = sensorR2LocationRow = robotMidPointRow;
					sensorL1LocationCol = sensorL2LocationCol = robotMidPointCol-2;
					sensorR1LocationCol = sensorR2LocationCol = robotMidPointCol+2;
					break;
			case EAST:	
					col = robotMidPointCol+2;
					sensorF1LocationCol = sensorF2LocationCol = sensorF3LocationCol = col;
					sensorF1LocationRow = robotMidPointRow-1;
					sensorF2LocationRow = robotMidPointRow;
					sensorF3LocationRow = robotMidPointRow+1;
					
					sensorL1LocationCol = sensorR1LocationCol = robotMidPointCol+1;
					sensorL2LocationCol = sensorR2LocationCol = robotMidPointCol;
					sensorL1LocationRow = sensorL2LocationRow = robotMidPointRow-2;
					sensorR1LocationRow = sensorR2LocationRow = robotMidPointRow+2;
					break;
			case SOUTH:	
					row = robotMidPointRow+2;
					sensorF1LocationRow = sensorF2LocationRow = sensorF3LocationRow = row;
					sensorF1LocationCol = robotMidPointCol+1;
					sensorF2LocationCol = robotMidPointCol;
					sensorF3LocationCol = robotMidPointCol-1;
					
					sensorL1LocationRow = sensorR1LocationRow = robotMidPointRow+1;
					sensorL2LocationRow = sensorR2LocationRow = robotMidPointRow;
					sensorL1LocationCol = sensorL2LocationCol = robotMidPointCol+2;
					sensorR1LocationCol = sensorR2LocationCol = robotMidPointCol-2;
					break;
			case WEST:
					col = robotMidPointCol-2;
					sensorF1LocationCol = sensorF2LocationCol = sensorF3LocationCol = col;
					sensorF1LocationRow = robotMidPointRow+1;
					sensorF2LocationRow = robotMidPointRow;
					sensorF3LocationRow = robotMidPointRow-1;
					
					sensorL1LocationCol = sensorR1LocationCol = robotMidPointCol-1;
					sensorL2LocationCol = sensorR2LocationCol = robotMidPointCol;
					sensorL1LocationRow = sensorL2LocationRow = robotMidPointRow+2;
					sensorR1LocationRow = sensorR2LocationRow = robotMidPointRow-2;
					break;
		}
		System.out.println("Telemetric Information Updated.");
	}
	//Loading initial obstacles
	private void initObstacles() {
		maze.setObstacles(1,10);
		maze.setObstacles(2,10);
		maze.setObstacles(4,4);
		maze.setObstacles(4,5);
		maze.setObstacles(5,4);
		maze.setObstacles(5,5);
		maze.setObstacles(8,1);
		maze.setObstacles(8,2);
		maze.setObstacles(8,3);
		maze.setObstacles(8,12);
		maze.setObstacles(8,13);
		maze.setObstacles(9,12);
		maze.setObstacles(9,13);
		maze.setObstacles(10,12);
		maze.setObstacles(10,13);
		maze.setObstacles(11,5);
		maze.setObstacles(11,12);
		maze.setObstacles(11,13);
		maze.setObstacles(11,14);
		maze.setObstacles(11,15);
		maze.setObstacles(12,5);
		maze.setObstacles(13,5);
		maze.setObstacles(14,5);
		maze.setObstacles(18,8);
		maze.setObstacles(18,9);
		maze.setObstacles(19,8);
		maze.setObstacles(19,9);
		//maze.setObstacles(robotMidPointRow,robotMidPointCol+2);
	}
}
